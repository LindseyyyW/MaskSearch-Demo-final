{"ast":null,"code":"var _jsxFileName = \"/Users/hjyu/Documents/UW/Projects/MaskSearch/MaskSearch-Demo-final/Demo-GUI/frontend/src/components/ImageSelection.js\",\n  _s = $RefreshSig$();\n// // src/components/ImageSelection.js\n// import React from 'react';\n// import Modal from 'react-modal';\n\n// Modal.setAppElement('#root');\n\n// function ImageSelection({ isOpen, imageId, onRequestClose, mode }) {\n//     let imagePath;\n//     if (mode === 'Top-K') {\n//         imagePath = 'topk_results';\n//     } else if (mode === 'Filter') {\n//         imagePath = 'topk_results';\n//     } else if (mode === 'Aggregation') {\n//         imagePath = 'aggregation_results';\n//     }\n//     const imageUrl = `http://localhost:9000/${imagePath}/${imageId}.png`;\n\n//     const handleImageLoadError = () => {\n//         console.error('Failed to load image with ID:', imageId);\n//     };\n\n//     return (\n//         <Modal \n//             isOpen={isOpen} \n//             onRequestClose={onRequestClose} \n//             style={{\n//                 overlay: {\n//                     backgroundColor: 'rgba(0, 0, 0, 0.8)' // Optional: dark overlay\n//                 },\n//                 content: {\n//                     position: 'fixed',\n//                     top: '50%',\n//                     left: '50%',\n//                     right: 'auto',\n//                     bottom: 'auto',\n//                     transform: 'translate(-50%, -50%)',\n//                     maxWidth: '90%', // Limiting image size\n//                     maxHeight: '90%', // Limiting image size\n//                     overflow: 'auto' // Ensures content can be scrolled if larger than the modal\n//                 }\n//             }}\n//         >\n//             <div style={{ textAlign: 'center' }}>\n//                 <img\n//                     src={imageUrl}\n//                     alt={`Selected Image ${imageId}`}\n//                     onError={handleImageLoadError}\n//                     style={{ maxWidth: '100%', maxHeight: '100vh' }} // Resizes image to not be too large\n//                 />\n//                 <div>\n//                     <button onClick={onRequestClose} style={{ marginTop: '20px' }}>Close</button>\n//                 </div>\n//             </div>\n//         </Modal>\n//     );\n// }\n\n// export default ImageSelection;\n\nimport React, { useState, useEffect } from 'react';\nimport Modal from 'react-modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement('#root');\nfunction ImageSelection({\n  scenario,\n  isOpen,\n  imageId,\n  onRequestClose,\n  mode\n}) {\n  _s();\n  const [stat, setStat] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  useEffect(() => {\n    let imagePath;\n    let statUrl;\n    if (scenario === 'scenario1') {\n      if (mode === 'Top-K' || mode === 'Filter' || mode === 'Aggregation') {\n        imagePath = 'topk_results';\n      }\n      setImageUrl(`http://localhost:8000/${imagePath}/${imageId}.jpg`);\n    } else if (scenario === 'scenario2') {\n      imagePath = 'topk_images';\n      statUrl = `http://localhost:8000/topk_labels/${imageId}`;\n      setImageUrl(`http://localhost:8000/${imagePath}/${imageId}.JPEG`);\n      const fetchImageLabels = async () => {\n        const response = await fetch(statUrl, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const labels = await response.json();\n        const correctness = labels.correctness ? 'Correct' : 'Incorrect';\n        const attack = labels.attack ? 'Yes' : 'No';\n        setStat(`Prediction: ${correctness};  Attack: ${attack}`);\n      };\n      fetchImageLabels();\n    } else if (scenario === 'scenario3') {\n      if (mode === 'Top-K') {\n        imagePath = 'topk_results';\n      } else if (mode === 'Filter') {\n        imagePath = 'filter_results';\n      } else if (mode === 'Aggregation') {\n        imagePath = 'aggregation_results';\n      }\n      setImageUrl(`http://localhost:8000/${imagePath}/${imageId}.jpg`);\n    }\n  }, [imageId, mode, scenario]);\n  const handleImageLoadError = () => {\n    console.error('Failed to load image with ID:', imageId);\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: isOpen,\n    onRequestClose: onRequestClose,\n    style: {\n      overlay: {\n        backgroundColor: 'rgba(0, 0, 0, 0.8)'\n      },\n      content: {\n        position: 'fixed',\n        top: '50%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        transform: 'translate(-50%, -50%)',\n        maxWidth: '90%',\n        maxHeight: '90%',\n        overflow: 'auto'\n      }\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: imageUrl,\n        alt: `Selected Image ${imageId}`,\n        onError: handleImageLoadError,\n        style: {\n          maxWidth: '100%',\n          maxHeight: '80vh'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), scenario === 'scenario2' && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '5px'\n        },\n        children: stat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onRequestClose,\n          style: {\n            marginTop: '20px'\n          },\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n}\n_s(ImageSelection, \"TkKUSEqp434xB3eFzpvnbfCk9SU=\");\n_c = ImageSelection;\nexport default ImageSelection;\nvar _c;\n$RefreshReg$(_c, \"ImageSelection\");","map":{"version":3,"names":["React","useState","useEffect","Modal","jsxDEV","_jsxDEV","setAppElement","ImageSelection","scenario","isOpen","imageId","onRequestClose","mode","_s","stat","setStat","imageUrl","setImageUrl","imagePath","statUrl","fetchImageLabels","response","fetch","method","headers","labels","json","correctness","attack","handleImageLoadError","console","error","style","overlay","backgroundColor","content","position","top","left","right","bottom","transform","maxWidth","maxHeight","overflow","children","textAlign","src","alt","onError","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","onClick","_c","$RefreshReg$"],"sources":["/Users/hjyu/Documents/UW/Projects/MaskSearch/MaskSearch-Demo-final/Demo-GUI/frontend/src/components/ImageSelection.js"],"sourcesContent":["// // src/components/ImageSelection.js\n// import React from 'react';\n// import Modal from 'react-modal';\n\n// Modal.setAppElement('#root');\n\n// function ImageSelection({ isOpen, imageId, onRequestClose, mode }) {\n//     let imagePath;\n//     if (mode === 'Top-K') {\n//         imagePath = 'topk_results';\n//     } else if (mode === 'Filter') {\n//         imagePath = 'topk_results';\n//     } else if (mode === 'Aggregation') {\n//         imagePath = 'aggregation_results';\n//     }\n//     const imageUrl = `http://localhost:9000/${imagePath}/${imageId}.png`;\n\n//     const handleImageLoadError = () => {\n//         console.error('Failed to load image with ID:', imageId);\n//     };\n\n//     return (\n//         <Modal \n//             isOpen={isOpen} \n//             onRequestClose={onRequestClose} \n//             style={{\n//                 overlay: {\n//                     backgroundColor: 'rgba(0, 0, 0, 0.8)' // Optional: dark overlay\n//                 },\n//                 content: {\n//                     position: 'fixed',\n//                     top: '50%',\n//                     left: '50%',\n//                     right: 'auto',\n//                     bottom: 'auto',\n//                     transform: 'translate(-50%, -50%)',\n//                     maxWidth: '90%', // Limiting image size\n//                     maxHeight: '90%', // Limiting image size\n//                     overflow: 'auto' // Ensures content can be scrolled if larger than the modal\n//                 }\n//             }}\n//         >\n//             <div style={{ textAlign: 'center' }}>\n//                 <img\n//                     src={imageUrl}\n//                     alt={`Selected Image ${imageId}`}\n//                     onError={handleImageLoadError}\n//                     style={{ maxWidth: '100%', maxHeight: '100vh' }} // Resizes image to not be too large\n//                 />\n//                 <div>\n//                     <button onClick={onRequestClose} style={{ marginTop: '20px' }}>Close</button>\n//                 </div>\n//             </div>\n//         </Modal>\n//     );\n// }\n\n// export default ImageSelection;\n\n\nimport React, { useState, useEffect } from 'react';\nimport Modal from 'react-modal';\n\nModal.setAppElement('#root');\n\nfunction ImageSelection({ scenario, isOpen, imageId, onRequestClose, mode }) {\n    const [stat, setStat] = useState('');\n    const [imageUrl, setImageUrl] = useState('');\n\n    useEffect(() => {\n        let imagePath;\n        let statUrl;\n\n        if (scenario === 'scenario1') {\n            if (mode === 'Top-K' || mode === 'Filter' || mode === 'Aggregation') {\n                imagePath = 'topk_results';\n            }\n            setImageUrl(`http://localhost:8000/${imagePath}/${imageId}.jpg`);\n        } else if (scenario === 'scenario2') {\n            imagePath = 'topk_images';\n            statUrl = `http://localhost:8000/topk_labels/${imageId}`;\n            setImageUrl(`http://localhost:8000/${imagePath}/${imageId}.JPEG`);\n\n            const fetchImageLabels = async () => {\n                const response = await fetch(statUrl, {\n                    method: 'GET',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                });\n                const labels = await response.json();\n                const correctness = labels.correctness ? 'Correct' : 'Incorrect';\n                const attack = labels.attack ? 'Yes' : 'No';\n                setStat(`Prediction: ${correctness};  Attack: ${attack}`);\n            };\n\n            fetchImageLabels();\n        } else if (scenario === 'scenario3') {\n            if (mode === 'Top-K') {\n                imagePath = 'topk_results';\n            } else if (mode === 'Filter') {\n                imagePath = 'filter_results';\n            } else if (mode === 'Aggregation') {\n                imagePath = 'aggregation_results';\n            }\n            setImageUrl(`http://localhost:8000/${imagePath}/${imageId}.jpg`);\n        }\n    }, [imageId, mode, scenario]);\n\n    const handleImageLoadError = () => {\n        console.error('Failed to load image with ID:', imageId);\n    };\n\n    return (\n        <Modal \n            isOpen={isOpen} \n            onRequestClose={onRequestClose} \n            style={{\n                overlay: {\n                    backgroundColor: 'rgba(0, 0, 0, 0.8)'\n                },\n                content: {\n                    position: 'fixed',\n                    top: '50%',\n                    left: '50%',\n                    right: 'auto',\n                    bottom: 'auto',\n                    transform: 'translate(-50%, -50%)',\n                    maxWidth: '90%',\n                    maxHeight: '90%',\n                    overflow: 'auto'\n                }\n            }}\n        >\n            <div style={{ textAlign: 'center' }}>\n                <img\n                    src={imageUrl}\n                    alt={`Selected Image ${imageId}`}\n                    onError={handleImageLoadError}\n                    style={{ maxWidth: '100%', maxHeight: '80vh' }}\n                />\n                {scenario === 'scenario2' && (\n                    <div style={{ marginTop: '5px' }}>\n                        {stat}\n                    </div>\n                )}\n                <div>\n                    <button onClick={onRequestClose} style={{ marginTop: '20px' }}>Close</button>\n                </div>\n            </div>\n        </Modal>\n    );\n}\n\nexport default ImageSelection;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}